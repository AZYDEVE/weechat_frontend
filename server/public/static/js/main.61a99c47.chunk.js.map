{"version":3,"sources":["components/sideBar/ChatRoomCard.js","utils/auth0API.js","components/createChatRoom/UserSelect.js","utils/userUtil.js","Constant/url.js","utils/webSocket.js","services/relationship_api.js","components/createChatRoom/CreateChatRoom.js","components/sideBar/ChatRoomSideBar.js","components/chatRoom/MessageCard.js","components/chatRoom/ChatRoom.js","chatPage/ChatPage.js","components/NavBar/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["ChatRoomCard","selectChatRoom","stylings","chatRoom","activeChatRoom","style","Id","onClick","display","width","height","flexDirection","justifyContent","alignItems","cursor","name","getAllUsers","a","options","method","url","process","params","search_engine","headers","authorization","axios","request","then","response","data","UserSelect","onChange","isMulti","placeholder","useAuthInfo","useAuth0","user","isAuthenticated","useState","email","user_id","nickname","currentUserInfo","setCurrentUserInfo","useEffect","one_user","sub","getOneUser","server_urls","mq_ports","OpenSocket","ws","WebSocket","onopen","event","console","log","connectingServer","connectingMqPort","notifyExpressChangeMqPort","port","send","JSON","stringify","type","body","error","fetching","path","param","post","result","status","Error","entries","index","addGroup","groupName","userList","listGroups","userId","getChatRoomHistory","chatRoomId","sendNewMesage","messageInfo","CreateChatRoom","open","onClose","refreshChatRoom","currentUser","UseAuthInfo","listOfUsers","SetListOfUsers","friendSelected","setFriendsSelected","chatRoomName","setChatroomName","getUsers","obj","users","label","value","push","createChatRoom","length","Swal","fire","icon","title","text","friend","friendList","className","target","ChatRoomSideBar","listOfchatRoom","listOfChatRoom","isOpen","setIsOpen","size","map","key","backgroundColor","margin","boarder","borderRadius","boxShadow","MessageCard","message","time","isCurrentUser","Moment","format","ChatRoom","listOfMessages","userInfo","getUserInfo","inputMessage","setInputMessage","messagesEndRef","useRef","current","scrollIntoView","behavior","scrollToBottom","clickSend","groupId","senderId","UserID","timestamp","ref","color","ChatPage","setListOfChatRoom","chatRoomID","setChatRoomID","setListOfMessages","onmessage","parse","getListOfChatRooms","datas","warningMessages","fetchListOfChatroom","listOfRoom","chatHistory","NavBar","isLoading","loginWithRedirect","logout","LogInOutButton","returnTo","window","location","origin","GetInfoButton","i","Object","keys","userObj","Profile","Navbar","bg","sticky","Container","Brand","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","domain","clientId","redirectUri","document","getElementById"],"mappings":"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","file":"static/js/main.61a99c47.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ChatRoomCard = ({\n  selectChatRoom,\n  stylings,\n  chatRoom,\n  activeChatRoom,\n}) => {\n  const handleChatRoomClick = () => {\n    selectChatRoom(chatRoom.Id);\n  };\n\n  const handleBackGroundColor = () => {\n    if (chatRoom.Id === activeChatRoom) {\n      stylings[\"backgroundColor\"] = \"#ECECEC\";\n      return stylings;\n    } else {\n      return stylings;\n    }\n  };\n\n  return (\n    <>\n      <div style={handleBackGroundColor()} onClick={handleChatRoomClick}>\n        <div\n          style={{\n            display: \"flex\",\n            width: \"100%\",\n            height: \"100%\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            cursor: \"pointer\",\n          }}>\n          {chatRoom.name}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ChatRoomCard;\n","import axios from \"axios\";\n\n// https://auth0.com/docs/users/user-search/retrieve-users-with-get-users-endpoint\n// this hardcoded api_token will be expired on Dec 17 2021 at noon\nconst domain = process.env.REACT_APP_AUTH0_DOMAIN || \"\";\nconst api_token = process.env.REACT_APP_AUTH0_MGMT_API_ACCESS_TOKEN || \"\";\n\nconst getAllUsers = async () => {\n  const options = {\n    method: \"GET\",\n    url: `https://${domain}/api/v2/users`,\n    params: { search_engine: \"v3\" },\n    headers: {\n      authorization: `Bearer ${api_token}`,\n    },\n  };\n\n  return axios.request(options).then(function (response) {\n    // console.log(response.data);\n    return response.data;\n  });\n};\n\nexport default getAllUsers;\n","import React from \"react\";\nimport Select from \"react-select\";\n\n// const options = [\n//   { label: \"React\", value: \"react\" },\n//   { label: \"HTML\", value: \"html\" },\n//   { label: \"Java\", value: \"java\" },\n// ];\nconst UserSelect = ({ options, onChange }) => {\n  return (\n    <div>\n      <Select\n        isMulti={true}\n        options={options}\n        placeholder=\"select your friends\"\n        onChange={onChange}></Select>\n    </div>\n  );\n};\n\nexport default UserSelect;\n","import { useEffect, useState } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\n// https://reactjs.org/docs/hooks-custom.html\nfunction useAuthInfo() {\n  const { user, isAuthenticated } = useAuth0();\n\n  const [currentUserInfo, setCurrentUserInfo] = useState({\n    email: \"\",\n    user_id: \"\",\n    nickname: \"\",\n  });\n\n  useEffect(() => {\n    const getOneUser = () => {\n      const one_user = {\n        email: user.email,\n        user_id: user.sub,\n        nickname: user.nickname,\n      };\n      setCurrentUserInfo(one_user);\n    };\n\n    if (isAuthenticated) {\n      getOneUser();\n    }\n  }, [user, isAuthenticated]);\n\n  return currentUserInfo;\n}\n\nexport default useAuthInfo;\n","export const server_urls = [\n  \"http://localhost:30001\",\n  \"http://localhost:30002\",\n  \"http://localhost:30003\",\n  \"http://localhost:30004\",\n  \"http://localhost:30005\",\n];\n\nexport const mq_ports = [61613, 61620, 61621, 61622, 61623];\n","import React from \"react\";\n\nconst OpenSocket = () => {\n  const ws = new WebSocket(\"ws://localhost:3002\");\n\n  ws.onopen = function (event) {\n    console.log(\"socket is connected\");\n  };\n  return ws;\n};\n\nexport default OpenSocket;\n","import axios from \"axios\";\nimport { server_urls, mq_ports } from \"../Constant/url.js\";\nimport OpenSocket from \"../utils/webSocket\";\n\nlet connectingServer = server_urls[0];\nlet connectingMqPort = mq_ports[0];\nconst ws = OpenSocket();\nconst notifyExpressChangeMqPort = async (port) => {\n  try {\n    ws.send(JSON.stringify({ type: \"change_mqport\", body: connectingMqPort }));\n    console.log(connectingMqPort);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// if one server fails, try each of the other 4 servers, if all failed, return client \"all server failed\"\nconst fetching = async (path, param) => {\n  try {\n    let result = await axios.post(connectingServer + path, param);\n\n    if (result.status === 200) {\n      return result;\n    } else {\n      throw new Error(result.status);\n    }\n  } catch (error) {\n    for (let [index, url] of server_urls.entries()) {\n      connectingServer = url;\n      connectingMqPort = mq_ports[index];\n      console.log(connectingMqPort);\n      notifyExpressChangeMqPort(mq_ports[index]);\n      try {\n        let result = await axios.post(url + path, param);\n        if (result.status === 200) {\n          return result;\n        } else {\n          throw new Error(result.status);\n        }\n      } catch (error) {\n        console.log(error);\n        continue;\n      }\n    }\n  }\n\n  return \"all_servers_are_down\";\n};\n\nexport const addGroup = async (groupName, userList) => {\n  return await fetching(`/dbms/relationship/add`, {\n    groupName: groupName,\n    userList: userList,\n  });\n};\n\nexport const listGroups = async (userId) => {\n  return await fetching(`/dbms/relationship/list`, {\n    userId: userId,\n  });\n};\n\n// need to change the url\n\nexport const getChatRoomHistory = async (chatRoomId) => {\n  return await fetching(`/dbms/message/list`, {\n    chatRoomId: chatRoomId,\n  });\n};\n\nexport const sendNewMesage = async (messageInfo) => {\n  return await fetching(`/dbms/message/add`, messageInfo);\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./createChatRoom.css\";\nimport getAllUsers from \"../../utils/auth0API\";\nimport UserSelect from \"./UserSelect\";\nimport Swal from \"sweetalert2\";\nimport UseAuthInfo from \"../../utils/userUtil\";\nimport { addGroup } from \"../../services/relationship_api\";\n\nconst CreateChatRoom = ({ open, onClose, refreshChatRoom }) => {\n  const currentUser = UseAuthInfo();\n  const [listOfUsers, SetListOfUsers] = useState(\"\");\n  const [friendSelected, setFriendsSelected] = useState([]);\n  const [chatRoomName, setChatroomName] = useState(\"\");\n  const getUsers = async () => {\n    const result = await getAllUsers();\n\n    const users = [];\n    for (let obj in result) {\n      const user = {\n        label: result[obj][\"email\"],\n        value: result[obj],\n      };\n      users.push(user);\n    }\n    SetListOfUsers(users);\n  };\n\n  useEffect(() => {\n    if (listOfUsers === \"\") {\n      getUsers();\n    }\n  }, []);\n\n  const handleSelectorOnChange = (value) => {\n    setFriendsSelected(value);\n  };\n\n  const handleChatRoomNameChange = (value) => {\n    setChatroomName(value.target.value);\n  };\n\n  //  for creating chat room , return a unique chatroom id\n  const createChatRoom = async () => {\n    if (chatRoomName === \" \" || friendSelected.length === 0) {\n      Swal.fire({\n        icon: \"error\",\n        title: \"Oops...\",\n        text: \"Some fields are empty\",\n      });\n      return;\n    }\n\n    // prepare the create chatroom body for sending to backend\n    const friendList = [];\n    friendList.push(currentUser.email);\n    for (let friend in friendSelected) {\n      if (friendSelected[friend][\"label\"] !== currentUser.email) {\n        friendList.push(friendSelected[friend][\"label\"]);\n      }\n    }\n\n    //\n    //this is where getting the unique groupId\n    // const uniqueGroupID = Axio.fetch .....\n    const result = await addGroup(chatRoomName, friendList);\n\n    if (result.status !== 200) {\n      Swal.fire({\n        icon: \"error\",\n        title: \"Oops...\",\n        text: \"something went wrong\",\n      });\n    }\n\n    // maybe delete\n    refreshChatRoom();\n\n    onClose();\n  };\n\n  if (!open) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"create-chat-container\">\n        <div className=\"overlay-container\">\n          <textarea\n            className=\"chatRoomName\"\n            placeholder=\"Create chatroom name\"\n            value={chatRoomName}\n            onChange={handleChatRoomNameChange}\n          />\n          <div className=\"selection\">\n            <UserSelect\n              options={listOfUsers}\n              onChange={handleSelectorOnChange}\n            />\n          </div>\n          <div className=\"btn-container\">\n            <div className=\"btn-close\">\n              <button\n                onClick={onClose}\n                style={{ width: \"10vh\", height: \"5vh\" }}>\n                Close\n              </button>\n            </div>\n            <div className=\"btn-create\">\n              <button\n                style={{ width: \"10vh\", height: \"5vh\" }}\n                onClick={createChatRoom}>\n                Create\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default CreateChatRoom;\n","import React, { useState } from \"react\";\nimport Chatcard from \"./ChatRoomCard\";\nimport { MdAddBox } from \"react-icons/md/\";\nimport \"./chatRoomSideBar.css\";\nimport CreateChat from \"../createChatRoom/CreateChatRoom\";\n\nconst ChatRoomSideBar = ({\n  listOfChatRoom,\n  selectChatRoom,\n  activeChatRoom,\n  refreshChatRoom,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const getListOfChatRooms = (listOfchatRoom) => {\n    if (listOfChatRoom.length !== 0) {\n      return listOfchatRoom.map((chatRoom, key) => (\n        <Chatcard\n          stylings={{\n            height: \"60px\",\n            width: \"70%\",\n            backgroundColor: \"#CBC7C8\",\n            margin: \"10px\",\n            boarder: \"1px black\",\n            borderRadius: \"8px\",\n            boxShadow: \"1px 1.5px 3px rgba(0,0,0.18)\",\n          }}\n          chatRoom={chatRoom}\n          key={key}\n          selectChatRoom={selectChatRoom}\n          activeChatRoom={activeChatRoom}\n        />\n      ));\n    } else {\n      return <div>Loading...</div>;\n    }\n  };\n\n  return (\n    <>\n      <div className=\"ChatRoomSideBar\">\n        <MdAddBox size={60} onClick={() => setIsOpen(true)} />\n        <CreateChat\n          open={isOpen}\n          onClose={() => setIsOpen(false)}\n          refreshChatRoom={refreshChatRoom}\n        />\n        {getListOfChatRooms(listOfChatRoom)}\n      </div>\n    </>\n  );\n};\nexport default ChatRoomSideBar;\n","import React from \"react\";\nimport \"./messageCard.css\";\nimport Moment from \"moment\";\n\nconst MessageCard = ({ user, message, time, isCurrentUser }) => {\n  const convertMiliSecondToTime = () => {\n    return Moment(time).format(\"MM-DD hh:mm:ss a\");\n  };\n\n  return (\n    <>\n      <div\n        className={\n          isCurrentUser\n            ? \"user-msgCard-container\"\n            : \"not-User-msgCard-container\"\n        }>\n        <div\n          className={\n            isCurrentUser\n              ? \"user-message-container\"\n              : \"not-user-message-container\"\n          }>\n          <div className=\"user\">{user}</div>\n          <div\n            className={isCurrentUser ? \"user-messages\" : \"not-user-messages\"}>\n            {message}\n\n            <div className=\"time\">{convertMiliSecondToTime()}</div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default MessageCard;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { FiSend } from \"react-icons/fi/\";\nimport MessageCard from \"./MessageCard\";\nimport getUserInfo from \"../../utils/userUtil\";\nimport { sendNewMesage } from \"../../services/relationship_api\";\nimport \"./chatRoom.css\";\nimport Swal from \"sweetalert2\";\n\nconst ChatRoom = ({ activeChatRoom, listOfMessages }) => {\n  const userInfo = getUserInfo();\n\n  const [inputMessage, setInputMessage] = useState(\"\");\n\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [listOfMessages]);\n\n  // send new message the server\n  const clickSend = async () => {\n    if (inputMessage === \"\") {\n      return;\n    }\n\n    const messageInfo = {\n      groupId: activeChatRoom,\n      senderId: userInfo.email,\n      message: inputMessage,\n    };\n    const result = await sendNewMesage(messageInfo);\n    if (result.status === 200) {\n      setInputMessage(\"\");\n    } else {\n      Swal.fire({\n        icon: \"error\",\n        title: \"Oops...\",\n        text: \"all servers are down\",\n      });\n    }\n  };\n\n  const handleInputChanges = (event) => {\n    setInputMessage(event.target.value);\n  };\n\n  const sendBTNchangeColor = () => {\n    return inputMessage !== \"\" ? { color: \"green\" } : \"\";\n  };\n\n  const displayListOfMessages = () => {\n    if (listOfMessages.length !== 0) {\n      return listOfMessages.map((message, key) => {\n        let isCurrentUser = false;\n        if (message.UserID === userInfo.email) {\n          isCurrentUser = true;\n        }\n\n        return (\n          <MessageCard\n            user={message.UserID}\n            message={message.message}\n            time={message.timestamp}\n            isCurrentUser={isCurrentUser}\n            key={key}\n          />\n        );\n      });\n    } else {\n      return <div>Loading..</div>;\n    }\n  };\n\n  return (\n    <>\n      <div className=\"chatRoom\">\n        <div className=\"messageDisplay\">\n          {displayListOfMessages()}\n          <div ref={messagesEndRef} />\n        </div>\n        <div className=\"messageInput\">\n          <textarea\n            name=\"MessageInput\"\n            className=\"messsage_inputbox\"\n            value={inputMessage}\n            onChange={handleInputChanges}\n          />\n\n          <FiSend\n            className=\"btn-send pointing\"\n            onClick={clickSend}\n            style={sendBTNchangeColor()}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ChatRoom;\n","import React, { useState, useEffect } from \"react\";\nimport SideBar from \"../components/sideBar/ChatRoomSideBar\";\nimport ChatRoom from \"../components/chatRoom/ChatRoom\";\nimport useAuthInfo from \"../utils/userUtil\";\nimport OpenSocket from \"../utils/webSocket\";\nimport { listGroups, getChatRoomHistory } from \"../services/relationship_api\";\nimport \"./chatPage.css\";\nimport Swal from \"sweetalert2\";\n\nconst ChatPage = () => {\n  const ws = OpenSocket();\n  const userInfo = useAuthInfo();\n  const [listOfChatRoom, setListOfChatRoom] = useState([]);\n  const [chatRoomID, setChatRoomID] = useState(\"\");\n  const [listOfMessages, setListOfMessages] = useState([]);\n\n  ws.onmessage = function (event) {\n    const message = JSON.parse(event.data);\n\n    setListOfMessages((current) => [...current, message]);\n  };\n\n  const getListOfChatRooms = async () => {\n    //this function is to fetch from server a list of chatRoom associated with the userID\n\n    try {\n      const listOfChatRoom = await listGroups(userInfo.email);\n      console.log(listOfChatRoom);\n      if (listOfChatRoom !== \"all_servers_are_down\") {\n        setListOfChatRoom(listOfChatRoom.data.datas);\n      } else {\n        warningMessages(\"Most of the servers are down\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const fetchListOfChatroom = async () => {\n      const listOfRoom = await listGroups(userInfo.email);\n      console.log(listOfRoom);\n\n      if (listOfRoom !== \"all_servers_are_down\") {\n        setListOfChatRoom(listOfRoom.data.datas);\n      } else {\n        warningMessages(\"Most of the servers are down\");\n      }\n    };\n\n    if (userInfo.email !== \"\") {\n      try {\n        fetchListOfChatroom();\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, [userInfo]);\n\n  const warningMessages = (message) => {\n    Swal.fire({\n      icon: \"error\",\n      title: \"Oops...\",\n      text: message,\n    });\n  };\n\n  const selectChatRoom = async (chatRoomID) => {\n    setChatRoomID(chatRoomID);\n    ws.send(JSON.stringify({ type: \"newtopic\", body: chatRoomID }));\n    setListOfMessages([]);\n    //get chat history\n    try {\n      const chatHistory = await getChatRoomHistory(chatRoomID);\n\n      setListOfMessages(chatHistory[\"data\"][\"datas\"]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"chatPage_container\">\n        <SideBar\n          className=\"sideBar\"\n          listOfChatRoom={listOfChatRoom}\n          selectChatRoom={selectChatRoom}\n          activeChatRoom={chatRoomID}\n          refreshChatRoom={getListOfChatRooms}\n        />\n        <ChatRoom\n          className=\"chatroom\"\n          activeChatRoom={chatRoomID}\n          ws={ws}\n          listOfMessages={listOfMessages}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default ChatPage;\n","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { Navbar, Container } from \"react-bootstrap\";\nimport \"./navbar.css\";\nimport useAuthInfo from \"../../utils/userUtil\";\nimport getAllUsers from \"../../utils/auth0API\";\n\nconst NavBar = () => {\n  const { user, isAuthenticated, isLoading, loginWithRedirect, logout } =\n    useAuth0();\n\n  const LogInOutButton = () => {\n    if (!isAuthenticated) {\n      return (\n        <button onClick={() => loginWithRedirect()}>Log In/Register</button>\n      );\n    } else {\n      return (\n        <button onClick={() => logout({ returnTo: window.location.origin })}>\n          Log Out\n        </button>\n      );\n    }\n  };\n\n  var userInfo = useAuthInfo();\n\n  const GetInfoButton = () => {\n    return (\n      <button\n        onClick={() => {\n          // an example of how to use userUtil to get current user_id\n          console.log(userInfo.user_id);\n\n          // an example of how to use getAllUsers to get a userList\n          // note that getAllUsers() is an async function\n          // you must use \".then\" or other methods to cope with it\n          // otherwise the promise is pending, you will get undefined\n          getAllUsers().then((userList) => {\n            for (let i = 0; i < Object.keys(userList).length; i++) {\n              var userObj = userList[i];\n              console.log(\n                userObj.user_id + \" \" + userObj.nickname + \" \" + userObj.email\n              );\n            }\n          });\n        }}>\n        Get All Users\n      </button>\n    );\n  };\n\n  const Profile = () => {\n    if (isLoading) {\n      return <div>Loading ...</div>;\n    }\n    return isAuthenticated && <div>{user.name}</div>;\n  };\n\n  return (\n    <Navbar className=\"navbar\" bg=\"light\" sticky=\"top\">\n      <Container className=\"navbarContainer\">\n        <Navbar.Brand className=\"brand\">WeeChat</Navbar.Brand>\n        <div className=\"userSection\">\n          <Profile />\n          <LogInOutButton />\n          <GetInfoButton />\n        </div>\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./App.css\";\nimport ChatPage from \"./chatPage/ChatPage\";\nimport NavBar from \"./components/NavBar/NavBar\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"App\">\n        <NavBar />\n        <ChatPage />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Auth0Provider } from \"@auth0/auth0-react\";\n\nReactDOM.render(\n  <Auth0Provider\n    domain={process.env.REACT_APP_AUTH0_DOMAIN}\n    clientId={process.env.REACT_APP_AUTH0_CLIENT_ID}\n    redirectUri={window.location.origin}>\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}