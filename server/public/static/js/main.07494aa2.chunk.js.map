{"version":3,"sources":["components/sideBar/ChatRoomCard.js","utils/auth0API.js","components/createChatRoom/UserSelect.js","utils/userUtil.js","Constant/url.js","services/relationship_api.js","components/createChatRoom/CreateChatRoom.js","components/sideBar/ChatRoomSideBar.js","components/chatRoom/MessageCard.js","components/chatRoom/ChatRoom.js","utils/webSocket.js","chatPage/ChatPage.js","components/NavBar/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["ChatRoomCard","selectChatRoom","stylings","chatRoom","activeChatRoom","style","Id","onClick","display","width","height","flexDirection","justifyContent","alignItems","cursor","name","getAllUsers","a","options","method","url","process","params","search_engine","headers","authorization","axios","request","then","response","data","UserSelect","onChange","console","log","isMulti","placeholder","useAuthInfo","useAuth0","user","isAuthenticated","useState","email","user_id","nickname","currentUserInfo","setCurrentUserInfo","useEffect","one_user","sub","getOneUser","addGroup","groupName","userList","post","res","catch","err","error","listGroups","userId","getChatRoomHistory","chatRoomId","messageInfo","CreateChatRoom","open","onClose","currentUser","createNewChatRoomFunction","UseAuthInfo","listOfUsers","SetListOfUsers","friendSelected","setFriendsSelected","chatRoomName","setChatroomName","getUsers","obj","result","users","label","value","push","createChatRoom","length","Swal","fire","icon","title","text","friend","friendList","className","target","ChatRoomSideBar","listOfchatRoom","listOfChatRoom","isOpen","setIsOpen","size","map","backgroundColor","margin","boarder","borderRadius","boxShadow","MessageCard","message","time","isCurrentUser","Moment","format","ChatRoom","listOfMessages","userInfo","getUserInfo","inputMessage","setInputMessage","UserID","timestamp","clasName","event","sendNewMesage","groupId","senderId","color","OpenSocket","ws","WebSocket","onopen","ChatPage","setListOfChatRoom","chatRoomID","setChatRoomID","setListOfMessages","onmessage","JSON","parse","current","getListOfChatRooms","datas","listOfChatRoomObj","send","stringify","type","body","chatHistory","newChatRoom","NavBar","isLoading","loginWithRedirect","logout","LogInOutButton","returnTo","window","location","origin","GetInfoButton","i","Object","keys","userObj","Profile","Navbar","bg","sticky","Container","Brand","class","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","domain","clientId","redirectUri","document","getElementById"],"mappings":"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","file":"static/js/main.07494aa2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst ChatRoomCard = ({\r\n  selectChatRoom,\r\n  stylings,\r\n  chatRoom,\r\n  activeChatRoom,\r\n}) => {\r\n  const handleChatRoomClick = () => {\r\n    selectChatRoom(chatRoom.Id);\r\n  };\r\n\r\n  const handleBackGroundColor = () => {\r\n    if (chatRoom.Id === activeChatRoom) {\r\n      stylings[\"backgroundColor\"] = \"#ECECEC\";\r\n      return stylings;\r\n    } else {\r\n      return stylings;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={handleBackGroundColor()} onClick={handleChatRoomClick}>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            cursor: \"pointer\",\r\n          }}>\r\n          {chatRoom.name}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatRoomCard;\r\n","import axios from \"axios\";\r\n\r\n// https://auth0.com/docs/users/user-search/retrieve-users-with-get-users-endpoint\r\n// this hardcoded api_token will be expired on Dec 17 2021 at noon\r\nconst domain = process.env.REACT_APP_AUTH0_DOMAIN || \"\";\r\nconst api_token = process.env.REACT_APP_AUTH0_MGMT_API_ACCESS_TOKEN || \"\";\r\n\r\nconst getAllUsers = async () => {\r\n  const options = {\r\n    method: \"GET\",\r\n    url: `https://${domain}/api/v2/users`,\r\n    params: { search_engine: \"v3\" },\r\n    headers: {\r\n      authorization: `Bearer ${api_token}`,\r\n    },\r\n  };\r\n\r\n  return axios.request(options).then(function (response) {\r\n    // console.log(response.data);\r\n    return response.data;\r\n  });\r\n};\r\n\r\nexport default getAllUsers;\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\n// const options = [\r\n//   { label: \"React\", value: \"react\" },\r\n//   { label: \"HTML\", value: \"html\" },\r\n//   { label: \"Java\", value: \"java\" },\r\n// ];\r\nconst UserSelect = ({ options, onChange }) => {\r\n  console.log(options);\r\n  return (\r\n    <div>\r\n      <Select\r\n        isMulti={true}\r\n        options={options}\r\n        placeholder=\"select your friends\"\r\n        onChange={onChange}></Select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserSelect;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\n// https://reactjs.org/docs/hooks-custom.html\r\nfunction useAuthInfo() {\r\n  const { user, isAuthenticated } = useAuth0();\r\n\r\n  const [currentUserInfo, setCurrentUserInfo] = useState({\r\n    email: \"\",\r\n    user_id: \"\",\r\n    nickname: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    const getOneUser = () => {\r\n      const one_user = {\r\n        email: user.email,\r\n        user_id: user.sub,\r\n        nickname: user.nickname,\r\n      };\r\n      setCurrentUserInfo(one_user);\r\n    };\r\n\r\n    if (isAuthenticated) {\r\n      getOneUser();\r\n    }\r\n  }, [user, isAuthenticated]);\r\n\r\n  return currentUserInfo;\r\n}\r\n\r\nexport default useAuthInfo;\r\n","export const url = \"http://localhost:30001\";","import axios from \"axios\";\r\nimport { url } from \"../Constant/url.js\";\r\n\r\n// https://auth0.com/docs/users/user-search/retrieve-users-with-get-users-endpoint\r\n// this hardcoded api_token will be expired on Dec 17 2021 at noon\r\n\r\nexport async function addGroup(groupName, userList) {\r\n  return axios\r\n    .post(`${url}/dbms/relationship/add`, {\r\n      groupName: groupName,\r\n      userList: userList,\r\n    })\r\n    .then((res) => {\r\n      return res;\r\n    })\r\n    .catch((err) => {\r\n      console.error(err);\r\n    });\r\n}\r\n\r\nexport async function listGroups(userId) {\r\n  return await axios.post(`${url}/dbms/relationship/list`, { userId: userId });\r\n}\r\n\r\n// need to change the url\r\n\r\nexport async function getChatRoomHistory(chatRoomId) {\r\n  console.log(chatRoomId);\r\n  return axios.post(`${url}/dbms/message/list`, {\r\n    chatRoomId: chatRoomId\r\n  });\r\n}\r\n\r\nexport async function sendNewMesage(messageInfo) {\r\n  return axios\r\n    .post(`${url}/dbms/message/add`, messageInfo)\r\n    .then((res) => {\r\n      return res;\r\n    })\r\n    .catch((err) => {\r\n      console.error(err);\r\n    });\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./createChatRoom.css\";\r\nimport getAllUsers from \"../../utils/auth0API\";\r\nimport UserSelect from \"./UserSelect\";\r\nimport Swal from \"sweetalert2\";\r\nimport UseAuthInfo from \"../../utils/userUtil\";\r\nimport { addGroup } from \"../../services/relationship_api\";\r\n\r\nconst CreateChatRoom = ({ open, onClose, createNewChatRoomFunction }) => {\r\n  const currentUser = UseAuthInfo();\r\n  const [listOfUsers, SetListOfUsers] = useState(\"\");\r\n  const [friendSelected, setFriendsSelected] = useState([]);\r\n  const [chatRoomName, setChatroomName] = useState(\"\");\r\n  const getUsers = async () => {\r\n    const result = await getAllUsers();\r\n\r\n    const users = [];\r\n    for (let obj in result) {\r\n      const user = {\r\n        label: result[obj][\"email\"],\r\n        value: result[obj],\r\n      };\r\n      users.push(user);\r\n    }\r\n    SetListOfUsers(users);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (listOfUsers === \"\") {\r\n      getUsers();\r\n    }\r\n  }, []);\r\n\r\n  const handleSelectorOnChange = (value) => {\r\n    setFriendsSelected(value);\r\n  };\r\n\r\n  const handleChatRoomNameChange = (value) => {\r\n    setChatroomName(value.target.value);\r\n    console.log(chatRoomName);\r\n  };\r\n\r\n  //  for creating chat room , return a unique chatroom id\r\n  const createChatRoom = async () => {\r\n    if (chatRoomName === \" \" || friendSelected.length === 0) {\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Oops...\",\r\n        text: \"Some fields are empty\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    // prepare the create chatroom body for sending to backend\r\n    const friendList = [];\r\n    friendList.push(currentUser.email);\r\n    for (let friend in friendSelected) {\r\n      if (friendSelected[friend][\"label\"] !== currentUser.email) {\r\n        friendList.push(friendSelected[friend][\"label\"]);\r\n      }\r\n    }\r\n\r\n    //\r\n    //this is where getting the unique groupId\r\n    // const uniqueGroupID = Axio.fetch .....\r\n    addGroup(chatRoomName, friendList);\r\n\r\n    // maybe delete\r\n\r\n    onClose();\r\n  };\r\n\r\n  if (!open) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"create-chat-container\">\r\n        <div className=\"overlay-container\">\r\n          <textarea\r\n            className=\"chatRoomName\"\r\n            placeholder=\"Create chatroom name\"\r\n            value={chatRoomName}\r\n            onChange={handleChatRoomNameChange}\r\n          />\r\n          <div className=\"selection\">\r\n            <UserSelect\r\n              options={listOfUsers}\r\n              onChange={handleSelectorOnChange}\r\n            />\r\n          </div>\r\n          <div className=\"btn-container\">\r\n            <div className=\"btn-close\">\r\n              <button\r\n                onClick={onClose}\r\n                style={{ width: \"10vh\", height: \"5vh\" }}>\r\n                Close\r\n              </button>\r\n            </div>\r\n            <div className=\"btn-create\">\r\n              <button\r\n                style={{ width: \"10vh\", height: \"5vh\" }}\r\n                onClick={createChatRoom}>\r\n                Create\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateChatRoom;\r\n","import React, { useState } from \"react\";\r\nimport Chatcard from \"./ChatRoomCard\";\r\nimport { MdAddBox } from \"react-icons/md/\";\r\nimport \"./chatRoomSideBar.css\";\r\nimport CreateChat from \"../createChatRoom/CreateChatRoom\";\r\n\r\nconst ChatRoomSideBar = ({\r\n  listOfChatRoom,\r\n  selectChatRoom,\r\n  activeChatRoom,\r\n  createNewChatRoomFunction,\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const getListOfChatRooms = (listOfchatRoom) => {\r\n    console.log(listOfChatRoom);\r\n    if (listOfChatRoom.length !== 0) {\r\n      return listOfchatRoom.map((chatRoom) => (\r\n        <Chatcard\r\n          stylings={{\r\n            height: \"60px\",\r\n            width: \"70%\",\r\n            backgroundColor: \"#CBC7C8\",\r\n            margin: \"10px\",\r\n            boarder: \"1px black\",\r\n            borderRadius: \"8px\",\r\n            boxShadow: \"1px 1.5px 3px rgba(0,0,0.18)\",\r\n          }}\r\n          chatRoom={chatRoom}\r\n          selectChatRoom={selectChatRoom}\r\n          activeChatRoom={activeChatRoom}\r\n        />\r\n      ));\r\n    } else {\r\n      return <div>Loading...</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"ChatRoomSideBar\">\r\n        <MdAddBox size={60} onClick={() => setIsOpen(true)} />\r\n        <CreateChat\r\n          open={isOpen}\r\n          onClose={() => setIsOpen(false)}\r\n          createNewChatRoomFunction={createNewChatRoomFunction}\r\n        />\r\n        {getListOfChatRooms(listOfChatRoom)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ChatRoomSideBar;\r\n","import React from \"react\";\r\nimport \"./messageCard.css\";\r\nimport Moment from \"moment\";\r\n\r\nconst MessageCard = ({ user, message, time, isCurrentUser }) => {\r\n  const convertMiliSecondToTime = () => {\r\n    return Moment(time).format(\"MM-DD hh:mm:ss a\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={\r\n          isCurrentUser\r\n            ? \"user-msgCard-container\"\r\n            : \"not-User-msgCard-container\"\r\n        }>\r\n        <div\r\n          className={\r\n            isCurrentUser\r\n              ? \"user-message-container\"\r\n              : \"not-user-message-container\"\r\n          }>\r\n          <div className=\"user\">{user}</div>\r\n          <div\r\n            className={isCurrentUser ? \"user-messages\" : \"not-user-messages\"}>\r\n            {message}\r\n\r\n            <div className=\"time\">{convertMiliSecondToTime()}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MessageCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { FiSend } from \"react-icons/fi/\";\r\nimport MessageCard from \"./MessageCard\";\r\nimport getUserInfo from \"../../utils/userUtil\";\r\nimport { sendNewMesage } from \"../../services/relationship_api\";\r\nimport \"./chatRoom.css\";\r\n\r\n// const ws = new WebSocket(\"ws://localhost:3001\");\r\n\r\n// ws.onopen = function (event) {\r\n//   console.log(\"socket is connected\");\r\n//   ws.send(\"test\");\r\n// };\r\n\r\nconst ChatRoom = ({ activeChatRoom, listOfMessages }) => {\r\n  const userInfo = getUserInfo();\r\n\r\n  const [inputMessage, setInputMessage] = useState(\"\");\r\n\r\n  // send new message the server\r\n  const clickSend = () => {\r\n    if (inputMessage === \"\") {\r\n      console.log(\"message is empty\");\r\n      return;\r\n    }\r\n\r\n    console.log(userInfo);\r\n\r\n    console.log(activeChatRoom);\r\n    const messageInfo = {\r\n      groupId: activeChatRoom,\r\n      senderId: userInfo.email,\r\n      message: inputMessage,\r\n    };\r\n    sendNewMesage(messageInfo);\r\n    setInputMessage(\"\");\r\n  };\r\n\r\n  const handleInputChanges = (event) => {\r\n    setInputMessage(event.target.value);\r\n  };\r\n\r\n  const sendBTNchangeColor = () => {\r\n    return inputMessage !== \"\" ? { color: \"green\" } : \"\";\r\n  };\r\n\r\n  const displayListOfMessages = () => {\r\n    console.log(listOfMessages.length);\r\n\r\n    if (listOfMessages.length !== 0) {\r\n      return listOfMessages.map((message) => {\r\n        let isCurrentUser = false;\r\n        if (message.UserID === userInfo.email) {\r\n          isCurrentUser = true;\r\n        }\r\n\r\n        return (\r\n          <MessageCard\r\n            user={message.UserID}\r\n            message={message.message}\r\n            time={message.timestamp}\r\n            isCurrentUser={isCurrentUser}\r\n          />\r\n        );\r\n      });\r\n    } else {\r\n      return <div>Loading..</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chatRoom\">\r\n        <div className=\"messageDisplay\">{displayListOfMessages()}</div>\r\n        <div clasName=\"messageInput\">\r\n          <textarea\r\n            name=\"MessageInput\"\r\n            className=\"messsage_inputbox\"\r\n            value={inputMessage}\r\n            onChange={handleInputChanges}\r\n          />\r\n\r\n          <FiSend\r\n            className=\"btn-send pointing\"\r\n            onClick={clickSend}\r\n            style={sendBTNchangeColor()}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n","import React from \"react\";\r\n\r\nconst OpenSocket = () => {\r\n  const ws = new WebSocket(\"ws://localhost:3001\");\r\n\r\n  ws.onopen = function (event) {\r\n    console.log(\"socket is connected\");\r\n  };\r\n  return ws;\r\n};\r\n\r\nexport default OpenSocket;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport SideBar from \"../components/sideBar/ChatRoomSideBar\";\r\nimport ChatRoom from \"../components/chatRoom/ChatRoom\";\r\nimport useAuthInfo from \"../utils/userUtil\";\r\nimport OpenSocket from \"../utils/webSocket\";\r\nimport {\r\n  listGroups,\r\n  getChatRoomHistory,\r\n  addGroup,\r\n} from \"../services/relationship_api\";\r\nimport \"./chatPage.css\";\r\n\r\nconst ChatPage = () => {\r\n  const ws = OpenSocket();\r\n  const userInfo = useAuthInfo();\r\n  const [listOfChatRoom, setListOfChatRoom] = useState([]);\r\n  const [chatRoomID, setChatRoomID] = useState(\"\");\r\n  const [listOfMessages, setListOfMessages] = useState([]);\r\n\r\n  ws.onmessage = function (event) {\r\n    const message = JSON.parse(event.data);\r\n    console.log(message);\r\n    setListOfMessages((current) => [...current, message]);\r\n  };\r\n\r\n  const getListOfChatRooms = async () => {\r\n    //this function is to fetch from server a list of chatRoom associated with the userID\r\n    console.log(userInfo.email);\r\n    try {\r\n      const listOfChatRoom = await listGroups(userInfo.email);\r\n      setListOfChatRoom(listOfChatRoom.data.datas);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  //example if chatroom json\r\n  const listOfChatRoomObj = [\r\n    { name: \"chatroom A\", Id: \"A1\" },\r\n    { name: \"chatroom B\", Id: \"B1\" },\r\n    { name: \"chatroom C\", Id: \"C1\" },\r\n  ]; // delete: temp for testing\r\n\r\n  useEffect(() => {\r\n    console.log(userInfo);\r\n    if (userInfo.email !== \"\") {\r\n      //  setListOfChatRoom(listOfChatRoomObj);\r\n      try {\r\n        getListOfChatRooms(listOfChatRoomObj);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }, [userInfo]);\r\n\r\n  const selectChatRoom = async (chatRoomID) => {\r\n    console.log(chatRoomID);\r\n    setChatRoomID(chatRoomID);\r\n    ws.send(JSON.stringify({ type: \"newtopic\", body: chatRoomID }));\r\n    setListOfMessages([]);\r\n    //get chat history\r\n    try {\r\n      const chatHistory = await getChatRoomHistory(chatRoomID);\r\n      console.log(chatHistory);\r\n      setListOfMessages(chatHistory[\"data\"][\"datas\"]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const appenNewChatRoom = (newChatRoom) => {\r\n    setListOfChatRoom([...listOfChatRoom, newChatRoom]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chatPage_container\">\r\n        <SideBar\r\n          className=\"sideBar\"\r\n          listOfChatRoom={listOfChatRoom}\r\n          selectChatRoom={selectChatRoom}\r\n          activeChatRoom={chatRoomID}\r\n          createNewChatRoomFunction={appenNewChatRoom}\r\n        />\r\n        <ChatRoom\r\n          className=\"chatroom\"\r\n          activeChatRoom={chatRoomID}\r\n          ws={ws}\r\n          listOfMessages={listOfMessages}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n","import React from \"react\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport { Navbar, Container } from \"react-bootstrap\";\r\nimport \"./navbar.css\";\r\nimport useAuthInfo from \"../../utils/userUtil\";\r\nimport getAllUsers from \"../../utils/auth0API\";\r\nimport {listGroups, addGroup} from \"../../services/relationship_api\"\r\n\r\nconst NavBar = () => {\r\n  const { user, isAuthenticated, isLoading, loginWithRedirect, logout } =\r\n    useAuth0();\r\n\r\n  const LogInOutButton = () => {\r\n    if (!isAuthenticated) {\r\n      return (\r\n        <button onClick={() => loginWithRedirect()}>Log In/Register</button>\r\n      );\r\n    } else {\r\n      return (\r\n        <button onClick={() => logout({ returnTo: window.location.origin })}>\r\n          Log Out\r\n        </button>\r\n      );\r\n    }\r\n  };\r\n\r\n  var userInfo = useAuthInfo();\r\n\r\n  const GetInfoButton = () => {\r\n    return (\r\n      <button\r\n        onClick={() => {\r\n          // an example of how to use userUtil to get current user_id\r\n          console.log(userInfo.user_id);\r\n\r\n\r\n          // an example of how to use getAllUsers to get a userList\r\n          // note that getAllUsers() is an async function\r\n          // you must use \".then\" or other methods to cope with it\r\n          // otherwise the promise is pending, you will get undefined\r\n          getAllUsers().then((userList) => {\r\n            for (let i = 0; i < Object.keys(userList).length; i++) {\r\n              var userObj = userList[i];\r\n              console.log(\r\n                userObj.user_id + \" \" + userObj.nickname + \" \" + userObj.email\r\n              );\r\n            }\r\n          });\r\n        }}\r\n      >\r\n        Get All Users\r\n      </button>\r\n    );\r\n  };\r\n\r\n  const Profile = () => {\r\n    if (isLoading) {\r\n      return <div>Loading ...</div>;\r\n    }\r\n    return isAuthenticated && <div>{user.name}</div>;\r\n  };\r\n\r\n  return (\r\n    <Navbar className=\"navbar\" bg=\"light\" sticky=\"top\">\r\n      <Container className=\"navbarContainer\">\r\n        <Navbar.Brand className=\"brand\">WeeChat</Navbar.Brand>\r\n        <div class=\"inline\" className=\"userSection\">\r\n          <Profile />\r\n          <LogInOutButton />\r\n          <GetInfoButton />\r\n        </div>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport ChatPage from \"./chatPage/ChatPage\";\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <div className=\"App\">\r\n        <NavBar />\r\n        <ChatPage />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Auth0Provider } from \"@auth0/auth0-react\";\r\n\r\nReactDOM.render(\r\n  <Auth0Provider\r\n    domain={process.env.REACT_APP_AUTH0_DOMAIN}\r\n    clientId={process.env.REACT_APP_AUTH0_CLIENT_ID}\r\n    redirectUri={window.location.origin}\r\n  >\r\n    <App />\r\n  </Auth0Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}