{"version":3,"sources":["components/sideBar/ChatRoomCard.js","utils/auth0API.js","components/createChatRoom/UserSelect.js","utils/userUtil.js","Constant/url.js","utils/webSocket.js","services/relationship_api.js","components/createChatRoom/CreateChatRoom.js","components/sideBar/ChatRoomSideBar.js","components/chatRoom/MessageCard.js","components/chatRoom/ChatRoom.js","chatPage/ChatPage.js","components/NavBar/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["ChatRoomCard","selectChatRoom","stylings","chatRoom","activeChatRoom","style","Id","onClick","display","width","height","flexDirection","justifyContent","alignItems","cursor","name","getAllUsers","a","options","method","url","process","params","search_engine","headers","authorization","axios","request","then","response","data","UserSelect","onChange","isMulti","placeholder","useAuthInfo","useAuth0","user","isAuthenticated","useState","email","user_id","nickname","currentUserInfo","setCurrentUserInfo","useEffect","one_user","sub","getOneUser","server_urls","mq_ports","OpenSocket","ws","WebSocket","onopen","event","console","log","connectingServer","connectingMqPort","notifyExpressChangeMqPort","port","send","JSON","stringify","type","body","error","fetching","path","param","post","result","status","Error","entries","index","addGroup","groupName","userList","listGroups","userId","getChatRoomHistory","chatRoomId","sendNewMesage","messageInfo","CreateChatRoom","open","onClose","refreshChatRoom","currentUser","UseAuthInfo","listOfUsers","SetListOfUsers","friendSelected","setFriendsSelected","chatRoomName","setChatroomName","getUsers","obj","users","label","value","push","createChatRoom","length","Swal","fire","icon","title","text","friend","friendList","className","target","ChatRoomSideBar","listOfchatRoom","listOfChatRoom","isOpen","setIsOpen","size","map","key","backgroundColor","margin","boarder","borderRadius","boxShadow","MessageCard","message","time","isCurrentUser","Moment","format","ChatRoom","listOfMessages","userInfo","getUserInfo","inputMessage","setInputMessage","messagesEndRef","useRef","current","scrollIntoView","behavior","scrollToBottom","clickSend","groupId","senderId","UserID","timestamp","ref","onKeyDown","color","ChatPage","setListOfChatRoom","chatRoomID","setChatRoomID","setListOfMessages","onmessage","parse","getListOfChatRooms","datas","warningMessages","fetchListOfChatroom","listOfRoom","chatHistory","NavBar","isLoading","loginWithRedirect","logout","LogInOutButton","marginTop","marginBottom","returnTo","window","location","origin","Profile","Navbar","bg","sticky","Container","Brand","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","domain","clientId","redirectUri","document","getElementById"],"mappings":"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","file":"static/js/main.6c19d1ba.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst ChatRoomCard = ({\r\n  selectChatRoom,\r\n  stylings,\r\n  chatRoom,\r\n  activeChatRoom,\r\n}) => {\r\n  const handleChatRoomClick = () => {\r\n    selectChatRoom(chatRoom.Id);\r\n  };\r\n\r\n  const handleBackGroundColor = () => {\r\n    if (chatRoom.Id === activeChatRoom) {\r\n      stylings[\"backgroundColor\"] = \"#ECECEC\";\r\n      return stylings;\r\n    } else {\r\n      return stylings;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={handleBackGroundColor()} onClick={handleChatRoomClick}>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            cursor: \"pointer\",\r\n          }}>\r\n          {chatRoom.name}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatRoomCard;\r\n","import axios from \"axios\";\r\n\r\n// https://auth0.com/docs/users/user-search/retrieve-users-with-get-users-endpoint\r\n// this hardcoded api_token will be expired on Dec 17 2021 at noon\r\nconst domain = process.env.REACT_APP_AUTH0_DOMAIN || \"\";\r\nconst api_token = process.env.REACT_APP_AUTH0_MGMT_API_ACCESS_TOKEN || \"\";\r\n\r\nconst getAllUsers = async () => {\r\n  const options = {\r\n    method: \"GET\",\r\n    url: `https://${domain}/api/v2/users`,\r\n    params: { search_engine: \"v3\" },\r\n    headers: {\r\n      authorization: `Bearer ${api_token}`,\r\n    },\r\n  };\r\n\r\n  return axios.request(options).then(function (response) {\r\n    // console.log(response.data);\r\n    return response.data;\r\n  });\r\n};\r\n\r\nexport default getAllUsers;\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\n// const options = [\r\n//   { label: \"React\", value: \"react\" },\r\n//   { label: \"HTML\", value: \"html\" },\r\n//   { label: \"Java\", value: \"java\" },\r\n// ];\r\nconst UserSelect = ({ options, onChange }) => {\r\n  return (\r\n    <div>\r\n      <Select\r\n        isMulti={true}\r\n        options={options}\r\n        placeholder=\"select your friends\"\r\n        onChange={onChange}></Select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserSelect;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\n// https://reactjs.org/docs/hooks-custom.html\r\nfunction useAuthInfo() {\r\n  const { user, isAuthenticated } = useAuth0();\r\n\r\n  const [currentUserInfo, setCurrentUserInfo] = useState({\r\n    email: \"\",\r\n    user_id: \"\",\r\n    nickname: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    const getOneUser = () => {\r\n      const one_user = {\r\n        email: user.email,\r\n        user_id: user.sub,\r\n        nickname: user.nickname,\r\n      };\r\n      setCurrentUserInfo(one_user);\r\n    };\r\n\r\n    if (isAuthenticated) {\r\n      getOneUser();\r\n    }\r\n  }, [user, isAuthenticated]);\r\n\r\n  return currentUserInfo;\r\n}\r\n\r\nexport default useAuthInfo;\r\n","export const server_urls = [\r\n  \"http://localhost:30001\",\r\n  \"http://localhost:30002\",\r\n  \"http://localhost:30003\",\r\n  \"http://localhost:30004\",\r\n  \"http://localhost:30005\",\r\n];\r\n\r\nexport const mq_ports = [61613, 61620, 61621, 61622, 61623];\r\n","import React from \"react\";\r\n\r\nconst OpenSocket = () => {\r\n  const ws = new WebSocket(\"ws://localhost:3000\");\r\n\r\n  ws.onopen = function (event) {\r\n    console.log(\"socket is connected\");\r\n  };\r\n  return ws;\r\n};\r\n\r\nexport default OpenSocket;\r\n","import axios from \"axios\";\r\nimport { server_urls, mq_ports } from \"../Constant/url.js\";\r\nimport OpenSocket from \"../utils/webSocket\";\r\n\r\nlet connectingServer = server_urls[0];\r\nlet connectingMqPort = mq_ports[0];\r\nconst ws = OpenSocket();\r\nconst notifyExpressChangeMqPort = async (port) => {\r\n  try {\r\n    ws.send(JSON.stringify({ type: \"change_mqport\", body: connectingMqPort }));\r\n    console.log(connectingMqPort);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// if one server fails, try each of the other 4 servers, if all failed, return client \"all server failed\"\r\nconst fetching = async (path, param) => {\r\n  try {\r\n    let result = await axios.post(connectingServer + path, param);\r\n\r\n    if (result.status === 200) {\r\n      return result;\r\n    } else {\r\n      throw new Error(result.status);\r\n    }\r\n  } catch (error) {\r\n    for (let [index, url] of server_urls.entries()) {\r\n      connectingServer = url;\r\n      connectingMqPort = mq_ports[index];\r\n      console.log(connectingMqPort);\r\n      notifyExpressChangeMqPort(mq_ports[index]);\r\n      try {\r\n        let result = await axios.post(url + path, param);\r\n        if (result.status === 200) {\r\n          return result;\r\n        } else {\r\n          throw new Error(result.status);\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        continue;\r\n      }\r\n    }\r\n  }\r\n\r\n  return \"all_servers_are_down\";\r\n};\r\n\r\nexport const addGroup = async (groupName, userList) => {\r\n  return await fetching(`/dbms/relationship/add`, {\r\n    groupName: groupName,\r\n    userList: userList,\r\n  });\r\n};\r\n\r\nexport const listGroups = async (userId) => {\r\n  return await fetching(`/dbms/relationship/list`, {\r\n    userId: userId,\r\n  });\r\n};\r\n\r\n// need to change the url\r\n\r\nexport const getChatRoomHistory = async (chatRoomId) => {\r\n  return await fetching(`/dbms/message/list`, {\r\n    chatRoomId: chatRoomId,\r\n  });\r\n};\r\n\r\nexport const sendNewMesage = async (messageInfo) => {\r\n  return await fetching(`/dbms/message/add`, messageInfo);\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./createChatRoom.css\";\r\nimport getAllUsers from \"../../utils/auth0API\";\r\nimport UserSelect from \"./UserSelect\";\r\nimport Swal from \"sweetalert2\";\r\nimport UseAuthInfo from \"../../utils/userUtil\";\r\nimport { addGroup } from \"../../services/relationship_api\";\r\n\r\nconst CreateChatRoom = ({ open, onClose, refreshChatRoom }) => {\r\n  const currentUser = UseAuthInfo();\r\n  const [listOfUsers, SetListOfUsers] = useState(\"\");\r\n  const [friendSelected, setFriendsSelected] = useState([]);\r\n  const [chatRoomName, setChatroomName] = useState(\"\");\r\n  const getUsers = async () => {\r\n    const result = await getAllUsers();\r\n\r\n    const users = [];\r\n    for (let obj in result) {\r\n      const user = {\r\n        label: result[obj][\"email\"],\r\n        value: result[obj],\r\n      };\r\n      users.push(user);\r\n    }\r\n    SetListOfUsers(users);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (listOfUsers === \"\") {\r\n      getUsers();\r\n    }\r\n  }, []);\r\n\r\n  const handleSelectorOnChange = (value) => {\r\n    setFriendsSelected(value);\r\n  };\r\n\r\n  const handleChatRoomNameChange = (value) => {\r\n    setChatroomName(value.target.value);\r\n  };\r\n\r\n  //  for creating chat room , return a unique chatroom id\r\n  const createChatRoom = async () => {\r\n    if (chatRoomName === \" \" || friendSelected.length === 0) {\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Oops...\",\r\n        text: \"Some fields are empty\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    // prepare the create chatroom body for sending to backend\r\n    const friendList = [];\r\n    friendList.push(currentUser.email);\r\n    for (let friend in friendSelected) {\r\n      if (friendSelected[friend][\"label\"] !== currentUser.email) {\r\n        friendList.push(friendSelected[friend][\"label\"]);\r\n      }\r\n    }\r\n\r\n    //\r\n    //this is where getting the unique groupId\r\n    // const uniqueGroupID = Axio.fetch .....\r\n    const result = await addGroup(chatRoomName, friendList);\r\n\r\n    if (result.status !== 200) {\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Oops...\",\r\n        text: \"something went wrong\",\r\n      });\r\n    }\r\n\r\n    // maybe delete\r\n    refreshChatRoom();\r\n\r\n    onClose();\r\n  };\r\n\r\n  if (!open) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"create-chat-container\">\r\n        <div className=\"overlay-container\">\r\n          <textarea\r\n            className=\"chatRoomName\"\r\n            placeholder=\"Create chatroom name\"\r\n            value={chatRoomName}\r\n            onChange={handleChatRoomNameChange}\r\n          />\r\n          <div className=\"selection\">\r\n            <UserSelect\r\n              options={listOfUsers}\r\n              onChange={handleSelectorOnChange}\r\n            />\r\n          </div>\r\n          <div className=\"btn-container\">\r\n            <div className=\"btn-close\">\r\n              <button\r\n                onClick={onClose}\r\n                style={{ width: \"10vh\", height: \"5vh\" }}>\r\n                Close\r\n              </button>\r\n            </div>\r\n            <div className=\"btn-create\">\r\n              <button\r\n                style={{ width: \"10vh\", height: \"5vh\" }}\r\n                onClick={createChatRoom}>\r\n                Create\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateChatRoom;\r\n","import React, { useState } from \"react\";\r\nimport Chatcard from \"./ChatRoomCard\";\r\nimport { MdAddBox } from \"react-icons/md/\";\r\nimport \"./chatRoomSideBar.css\";\r\nimport CreateChat from \"../createChatRoom/CreateChatRoom\";\r\n\r\nconst ChatRoomSideBar = ({\r\n  listOfChatRoom,\r\n  selectChatRoom,\r\n  activeChatRoom,\r\n  refreshChatRoom,\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const getListOfChatRooms = (listOfchatRoom) => {\r\n    if (listOfChatRoom.length !== 0) {\r\n      return listOfchatRoom.map((chatRoom, key) => (\r\n        <Chatcard\r\n          stylings={{\r\n            height: \"60px\",\r\n            width: \"70%\",\r\n            backgroundColor: \"#CBC7C8\",\r\n            margin: \"10px\",\r\n            boarder: \"1px black\",\r\n            borderRadius: \"8px\",\r\n            boxShadow: \"1px 1.5px 3px rgba(0,0,0.18)\",\r\n          }}\r\n          chatRoom={chatRoom}\r\n          key={key}\r\n          selectChatRoom={selectChatRoom}\r\n          activeChatRoom={activeChatRoom}\r\n        />\r\n      ));\r\n    } else {\r\n      return <div>Loading...</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"ChatRoomSideBar\">\r\n        <MdAddBox size={60} onClick={() => setIsOpen(true)} />\r\n        <CreateChat\r\n          open={isOpen}\r\n          onClose={() => setIsOpen(false)}\r\n          refreshChatRoom={refreshChatRoom}\r\n        />\r\n        {getListOfChatRooms(listOfChatRoom)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ChatRoomSideBar;\r\n","import React from \"react\";\r\nimport \"./messageCard.css\";\r\nimport Moment from \"moment\";\r\n\r\nconst MessageCard = ({ user, message, time, isCurrentUser }) => {\r\n  const convertMiliSecondToTime = () => {\r\n    return Moment(time).format(\"MM-DD hh:mm:ss a\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={\r\n          isCurrentUser\r\n            ? \"user-msgCard-container\"\r\n            : \"not-User-msgCard-container\"\r\n        }>\r\n        <div\r\n          className={\r\n            isCurrentUser\r\n              ? \"user-message-container\"\r\n              : \"not-user-message-container\"\r\n          }>\r\n          <div className=\"user\">{user}</div>\r\n          <div\r\n            className={isCurrentUser ? \"user-messages\" : \"not-user-messages\"}>\r\n            {message}\r\n\r\n            <div className=\"time\">{convertMiliSecondToTime()}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MessageCard;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FiSend } from \"react-icons/fi/\";\r\nimport MessageCard from \"./MessageCard\";\r\nimport getUserInfo from \"../../utils/userUtil\";\r\nimport { sendNewMesage } from \"../../services/relationship_api\";\r\nimport \"./chatRoom.css\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst ChatRoom = ({ activeChatRoom, listOfMessages }) => {\r\n  const userInfo = getUserInfo();\r\n\r\n  const [inputMessage, setInputMessage] = useState(\"\");\r\n\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      clickSend();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [listOfMessages]);\r\n\r\n  // send new message the server\r\n  const clickSend = async () => {\r\n    if (inputMessage === \"\") {\r\n      return;\r\n    }\r\n\r\n    const messageInfo = {\r\n      groupId: activeChatRoom,\r\n      senderId: userInfo.email,\r\n      message: inputMessage,\r\n    };\r\n    const result = await sendNewMesage(messageInfo);\r\n    if (result.status === 200) {\r\n      setInputMessage(\"\");\r\n    } else {\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Oops...\",\r\n        text: \"all servers are down\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleInputChanges = (event) => {\r\n    setInputMessage(event.target.value);\r\n  };\r\n\r\n  const sendBTNchangeColor = () => {\r\n    return inputMessage !== \"\" ? { color: \"green\" } : \"\";\r\n  };\r\n\r\n  const displayListOfMessages = () => {\r\n    if (listOfMessages.length !== 0) {\r\n      return listOfMessages.map((message, key) => {\r\n        let isCurrentUser = false;\r\n        if (message.UserID === userInfo.email) {\r\n          isCurrentUser = true;\r\n        }\r\n\r\n        return (\r\n          <MessageCard\r\n            user={message.UserID}\r\n            message={message.message}\r\n            time={message.timestamp}\r\n            isCurrentUser={isCurrentUser}\r\n            key={key}\r\n          />\r\n        );\r\n      });\r\n    } else {\r\n      return <div>Loading..</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chatRoom\">\r\n        <div className=\"messageDisplay\">\r\n          {displayListOfMessages()}\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n        <div className=\"messageInput\">\r\n          <textarea\r\n            name=\"MessageInput\"\r\n            className=\"messsage_inputbox\"\r\n            value={inputMessage}\r\n            onChange={handleInputChanges}\r\n            onKeyDown={handleKeyDown}\r\n          />\r\n\r\n          <FiSend\r\n            className=\"btn-send pointing\"\r\n            onClick={clickSend}\r\n            style={sendBTNchangeColor()}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport SideBar from \"../components/sideBar/ChatRoomSideBar\";\r\nimport ChatRoom from \"../components/chatRoom/ChatRoom\";\r\nimport useAuthInfo from \"../utils/userUtil\";\r\nimport OpenSocket from \"../utils/webSocket\";\r\nimport { listGroups, getChatRoomHistory } from \"../services/relationship_api\";\r\nimport \"./chatPage.css\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst ChatPage = () => {\r\n  const ws = OpenSocket();\r\n  const userInfo = useAuthInfo();\r\n  const [listOfChatRoom, setListOfChatRoom] = useState([]);\r\n  const [chatRoomID, setChatRoomID] = useState(\"\");\r\n  const [listOfMessages, setListOfMessages] = useState([]);\r\n\r\n  ws.onmessage = function (event) {\r\n    const message = JSON.parse(event.data);\r\n\r\n    setListOfMessages((current) => [...current, message]);\r\n  };\r\n\r\n  const getListOfChatRooms = async () => {\r\n    //this function is to fetch from server a list of chatRoom associated with the userID\r\n\r\n    try {\r\n      const listOfChatRoom = await listGroups(userInfo.email);\r\n      console.log(listOfChatRoom);\r\n      if (listOfChatRoom !== \"all_servers_are_down\") {\r\n        setListOfChatRoom(listOfChatRoom.data.datas);\r\n      } else {\r\n        warningMessages(\"Most of the servers are down\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchListOfChatroom = async () => {\r\n      const listOfRoom = await listGroups(userInfo.email);\r\n      console.log(listOfRoom);\r\n\r\n      if (listOfRoom !== \"all_servers_are_down\") {\r\n        setListOfChatRoom(listOfRoom.data.datas);\r\n      } else {\r\n        warningMessages(\"Most of the servers are down\");\r\n      }\r\n    };\r\n\r\n    if (userInfo.email !== \"\") {\r\n      try {\r\n        fetchListOfChatroom();\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }, [userInfo]);\r\n\r\n  const warningMessages = (message) => {\r\n    Swal.fire({\r\n      icon: \"error\",\r\n      title: \"Oops...\",\r\n      text: message,\r\n    });\r\n  };\r\n\r\n  const selectChatRoom = async (chatRoomID) => {\r\n    setChatRoomID(chatRoomID);\r\n    ws.send(JSON.stringify({ type: \"newtopic\", body: chatRoomID }));\r\n    setListOfMessages([]);\r\n    //get chat history\r\n    try {\r\n      const chatHistory = await getChatRoomHistory(chatRoomID);\r\n\r\n      setListOfMessages(chatHistory[\"data\"][\"datas\"]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chatPage_container\">\r\n        <SideBar\r\n          className=\"sideBar\"\r\n          listOfChatRoom={listOfChatRoom}\r\n          selectChatRoom={selectChatRoom}\r\n          activeChatRoom={chatRoomID}\r\n          refreshChatRoom={getListOfChatRooms}\r\n        />\r\n        <ChatRoom\r\n          className=\"chatroom\"\r\n          activeChatRoom={chatRoomID}\r\n          ws={ws}\r\n          listOfMessages={listOfMessages}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n","import React from \"react\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport { Navbar, Container } from \"react-bootstrap\";\r\nimport \"./navbar.css\";\r\n\r\nconst NavBar = () => {\r\n  const { user, isAuthenticated, isLoading, loginWithRedirect, logout } =\r\n    useAuth0();\r\n\r\n  const LogInOutButton = () => {\r\n    if (!isAuthenticated) {\r\n      return (\r\n        <button\r\n          style={{\r\n            width: \"15vh\",\r\n            height: \"3vh\",\r\n            marginTop: \"0.2vh\",\r\n            marginBottom: \"0.5vh\",\r\n          }}\r\n          onClick={() => loginWithRedirect()}>\r\n          Log In/Register\r\n        </button>\r\n      );\r\n    } else {\r\n      return (\r\n        <button\r\n          style={{\r\n            width: \"15vh\",\r\n            height: \"3vh\",\r\n            marginTop: \"0.2vh\",\r\n            marginBottom: \"0.5vh\",\r\n          }}\r\n          onClick={() => logout({ returnTo: window.location.origin })}>\r\n          Log Out\r\n        </button>\r\n      );\r\n    }\r\n  };\r\n\r\n  const Profile = () => {\r\n    if (isLoading) {\r\n      return <div>Loading ...</div>;\r\n    }\r\n    return isAuthenticated && <div>{user.name}</div>;\r\n  };\r\n\r\n  return (\r\n    <Navbar className=\"navbar\" bg=\"light\" sticky=\"top\">\r\n      <Container className=\"navbarContainer\">\r\n        <Navbar.Brand className=\"brand\">WeeChat</Navbar.Brand>\r\n        <div className=\"userSection\">\r\n          <Profile />\r\n          <LogInOutButton />\r\n        </div>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport ChatPage from \"./chatPage/ChatPage\";\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <div className=\"App\">\r\n        <NavBar />\r\n        <ChatPage />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Auth0Provider } from \"@auth0/auth0-react\";\r\n\r\nReactDOM.render(\r\n  <Auth0Provider\r\n    domain={process.env.REACT_APP_AUTH0_DOMAIN}\r\n    clientId={process.env.REACT_APP_AUTH0_CLIENT_ID}\r\n    redirectUri={window.location.origin}>\r\n    <App />\r\n  </Auth0Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}